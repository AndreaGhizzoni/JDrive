package it.hackcaffebabe.jdrive.local.watcher.events;

import it.hackcaffebabe.jdrive.events.Event;
import it.hackcaffebabe.jdrive.util.DateUtils;

import java.nio.file.Path;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;

/**
 * Class that contains information about events detected from File System by
 * Watcher. WatcherEvent's subclasses map the existing WatchEvent.Kind constants
 * into custom data objects.
 */
public abstract class WatcherEvent extends Event
{
    private Path path = null;

    WatcherEvent( Path path, String message ) {
        super( message );
        this.setPath( path );
    }

    /**
     * BuildNewFrom map a WatchEvent.Kind to WatcherEvent objects. Pass kind=null
     * to retrieve an Error subclass.
     * @param kind {@link WatchEvent.Kind} the kind of event generated by Watcher
     * @param file {@link java.nio.file.Path} the path to set for the event.
     * @return a subclass of {@link WatcherEvent}
     */
    public static WatcherEvent BuildNewFrom( WatchEvent.Kind kind, Path file ){
        if( kind == StandardWatchEventKinds.ENTRY_CREATE ){
            return new Create( file );
        }else if( kind == StandardWatchEventKinds.ENTRY_MODIFY ){
            return new Modify( file );
        }else if( kind == StandardWatchEventKinds.ENTRY_DELETE ){
            return new Delete( file );
        }else {
            return new Error("Error event created from builder.");
        }
    }

    /**
     * Convert a subclass of WatcherEvent into the corresponding
     * {@link WatchEvent.Kind}. Error class will return null.
     * @return {@link WatchEvent.Kind} corresponding to the subclass of
     *         WatcherEvent that Convert is called.
     */
    public abstract WatchEvent.Kind Convert();

    /**
     * @return {@link java.nio.file.Path} of the file associated at the event.
     */
    public Path getFile(){ return this.path; }

    public void setPath( Path path ) {
        if( path != null ){
            this.path = path.toAbsolutePath();
        }
    }

    @Override
    public String toString(){
        String superString = super.toString();
        String p = this.getFile() == null ? "null" : this.getFile().toString();
        String b = String.format( " \"path\": \"%s\"", p );
        return String.format( superString, "%s", b );
    }
}
